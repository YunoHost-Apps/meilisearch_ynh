#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
port=$(ynh_app_setting_get --app=$app --key=port)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
master_key=$(ynh_app_setting_get --app=$app --key=master_key)
allow_analyse=$(ynh_app_setting_get --app=$app --key=allow_analyse)
environment=$(ynh_app_setting_get --app=$app --key=environment)

# Variables used for dumps
DUMPS_DIR="$(mktemp -d -t meilisearch_dumps.XXXXX)"
declare -a dump_files=()
declare -A displayed_attributes=()
BASE_URL="http://localhost:$port"
HEADER_API_KEY="X-Meili-API-Key: $master_key"
#=================================================
# CHECK VERSION
#=================================================

if ynh_compare_current_package_version --comparison lt --version 0.15.0~ynh1; then
  ynh_die --message="Please upgrade from version 0.15 or above"
else
  upgrade_type=$(ynh_check_app_version_changed)
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up Meilisearch before upgrading (may take a while)..." --weight=5

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
    ynh_secure_remove --file=$DUMPS_DIR
    # restore it if the upgrade fails
    ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# DUMP DATA
#=================================================
ynh_script_progression --message="Dump the database for migration if application version changed" --weight=1
if [ "$upgrade_type" == "UPGRADE_APP" ]
then
    ynh_print_info --message="Version changed, beginning dumping"
    ynh_debug --message="Fetching the index ids"
    indexes_id=$(curl -s -X GET "$BASE_URL/indexes" --header "$HEADER_API_KEY" | jq -r '.[].uid')
    for index in $indexes_id
    do
        # store the displayed_attributes before temporarily removing them
        displayed_attributes+=([$index]="$(curl --fail --silent -X GET "$BASE_URL/indexes/$index/settings/displayed-attributes" --header "$HEADER_API_KEY")")
        # Remove the displayed_attributes for the dump:
        curl --silent --fail -X DELETE "$BASE_URL/indexes/$index/settings/displayed-attributes" --header "$HEADER_API_KEY"
    done
    ynh_debug --message="Requesting the Dump"
    dump_id=$(curl --silent --fail -X POST "$BASE_URL/dumps" --header "$HEADER_API_KEY" | jq -r ".uid")
    ynh_debug --message="Waiting for dump #$dump_id to be available"
    while [ "$(curl --silent --fail -X GET "$BASE_URL/dumps/$dump_id/status" --header "$HEADER_API_KEY" | jq -r ".status")" != "done" ]
    do
        sleep 5
    done
    # Depending on the version, the dump extension can be either a .tar.gz or a .dump (both are actually .tar.gz files)
    mv $final_path/dumps/$dump_id.* $DUMPS_DIR
    ynh_print_info --message="Dumping done!"
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# UPGRADING MEILISEARCH
#=================================================
ynh_script_progression --message="Upgrading Meilisearch..." --weight=5

arch=$(ynh_detect_arch)

if [ "$arch" != "amd64" ] && [ "$arch" != "armv8" ]
then
    ynh_die --message="Your OS Architecture is not supported"
fi

release_file=meilisearch-linux-$arch
curl -sOL https://github.com/meilisearch/MeiliSearch/releases/download/$latest/meilisearch-linux-$arch
chmod +x "$release_file"
mv "$release_file" /usr/bin/meilisearch

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=2

if [ $allow_analyse ]; then
    ynh_replace_string "__ANALYTICS__" "false" "../conf/systemd.service"
else
    ynh_replace_string "__ANALYTICS__" "true" "../conf/systemd.service"
fi

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --weight=2

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================

yunohost service add $app --description="Opensource next generation search API" --log="/var/log/$app/$app.log"

#=================================================
# IMPORT DUMP
#=================================================
ynh_script_progression --message="Import the dump..." --weight=3

if [ ${#displayed_attributes[@]} -eq 0 ]
then
    ynh_print_warn --message="No index found, database probably empty, skip"
elif [ "$upgrade_type" == "UPGRADE_APP" ]
then
    tmp_dump_logs="$(mktemp -p $DUMPS_DIR)"
    ynh_debug --message="Running import command"
    dump=$(find $DUMPS_DIR -name "$dump_id.tar.gz" -o -name "$dump_id.dump" | head -1)
    /usr/bin/meilisearch --db-path $DUMPS_DIR/data.ms --import-dump $DUMPS_DIR/$dump_id.* --master-key $master_key --http-addr 127.0.0.1:$port --no-analytics true &> $tmp_dump_logs &
    dump_pid=$!
    dump_timeout=300
    for i in $(seq $dump_timeout)
    do
        if [ "$(curl --silent -X GET "$BASE_URL/health" | jq -r ".status")" == "available" ]
        then
            ynh_debug --message="Importation succeeded"
            break
        fi
        if ! kill -0 $dump_pid &>/dev/null
        then
            ynh_die "The dump importation failed: $(cat $tmp_dump_logs)"
        fi
        if [ $i -eq 30 ]
        then
            ynh_print_warn --message="(Importation may take some time)"
        fi
        sleep 1
    done
    ynh_debug --message="Restore displayed_attributes"
    for index in ${!displayed_attributes[*]}
    do
        curl --silent --fail -X POST "$BASE_URL/indexes/$index/settings/displayed-attributes" --data "${displayed_attributes[$index]}" --header "$HEADER_API_KEY"
    done
    sleep 1 # let meilisearch process the above requests
    kill -SIGTERM $dump_pid
    [ $i -eq $dump_timeout ] && ynh_die "The importation failed, abort!"
    ynh_secure_remove --file=$final_path/data.ms
    mv $DUMPS_DIR/data.ms $final_path/data.ms

    chmod 750 "$final_path"
    chmod -R o-rwx "$final_path"
    chown -R $app:www-data "$final_path"
    ynh_secure_remove --file=$DUMPS_DIR
fi

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=3

ynh_systemd_action --service_name=$app --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of Meilisearch completed" --last
